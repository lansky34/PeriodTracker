apply plugin: 'com.android.application'

android {
    namespace "com.periodflow.app"
    compileSdkVersion rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.periodflow.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            } else if (System.getenv('ANDROID_KEYSTORE_PASSWORD')) {
                storeFile file('my-release-key.jks')
                storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
                keyAlias System.getenv('ANDROID_KEY_ALIAS')
                keyPassword System.getenv('ANDROID_KEY_PASSWORD')
            }
        }
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Only sign if keystore is available
            if (signingConfigs.release.storeFile?.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
    
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    // Publishing block removed - it's for libraries, not applications
}

// IMPORTANT: Remove ALL repositories from here
// This was causing the flatDir issues

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    
    // Use EXACT versions that match the variants
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.core:core:$androidxCoreVersion"
    implementation "androidx.activity:activity:$androidxActivityVersion"
    implementation "androidx.fragment:fragment:$androidxFragmentVersion"
    implementation "androidx.core:core-splashscreen:1.0.1"
    
    // Capacitor - use project references (revert Maven approach)
    implementation project(':capacitor-android')
    implementation project(':capacitor-cordova-android-plugins')
    
    // Plugin-specific dependencies with EXACT versions
    implementation 'com.google.android.gms:play-services-ads:22.6.0'
    implementation 'com.revenuecat.purchases:purchases:7.3.5'
    implementation 'androidx.work:work-runtime:2.8.1'
    
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// CRITICAL: Add this configuration to resolve variant issues
configurations.all {
    resolutionStrategy {
        // Force all conflicting dependencies to use compatible versions
        force 'androidx.core:core:1.12.0'
        force 'androidx.appcompat:appcompat:1.6.1'
        force 'androidx.activity:activity:1.8.0'
        force 'androidx.fragment:fragment:1.6.2'
        
        // Exclude problematic transitive dependencies
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v13'
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}