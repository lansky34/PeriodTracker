apply plugin: 'com.android.application'

android {
    namespace "com.periodflow.app"
    compileSdkVersion rootProject.ext.compileSdkVersion
    
    defaultConfig {
        applicationId "com.periodflow.app"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Enable multidex if needed
        multiDexEnabled true
        
        aaptOptions {
             // Files and dirs to omit from the packaged assets dir, modified to accommodate modern web apps.
             // Default: https://android.googlesource.com/platform/frameworks/base/+/282e181b58cf72b6ca770dc7ca5f91f135444502/tools/aapt/AaptAssets.cpp#61
            ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:.*:!CVS:!thumbs.db:!picasa.ini:!*~'
        }
    }
    
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            } else if (System.getenv('ANDROID_KEYSTORE_PASSWORD')) {
                storeFile file('my-release-key.jks')
                storePassword System.getenv('ANDROID_KEYSTORE_PASSWORD')
                keyAlias System.getenv('ANDROID_KEY_ALIAS')
                keyPassword System.getenv('ANDROID_KEY_PASSWORD')
            }
        }
    }
    
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // Only sign if keystore is available
            if (signingConfigs.release.storeFile?.exists()) {
                signingConfig signingConfigs.release
            }
        }
    }
    
    bundle {
        language {
            enableSplit = false
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    
    // Fix for packaging conflicts
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
    }
}

repositories {
    maven { url 'https://www.jitpack.io' }
    
    // IMPORTANT: Remove any flatDir repositories
    // DO NOT USE flatDir here
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    
    // Core Android dependencies with fixed versions
    implementation "androidx.appcompat:appcompat:$androidxAppCompatVersion"
    implementation "androidx.core:core:$androidxCoreVersion"
    implementation "androidx.activity:activity:$androidxActivityVersion"
    implementation "androidx.fragment:fragment:$androidxFragmentVersion"
    implementation "androidx.coordinatorlayout:coordinatorlayout:$androidxCoordinatorLayoutVersion"
    implementation "androidx.webkit:webkit:$androidxWebkitVersion"
    implementation "androidx.core:core-splashscreen:$coreSplashScreenVersion"
    
    // Capacitor core - use specific version to avoid conflicts
    implementation "com.getcapacitor:capacitor-android:$capacitorVersion"
    
    // Capacitor plugins - ensure compatibility
    implementation project(':capacitor-cordova-android-plugins')
    
    // Plugin dependencies with specific versions to resolve conflicts
    implementation 'com.google.android.gms:play-services-ads:22.6.0'
    implementation 'com.revenuecat.purchases:purchases:7.3.5'
    implementation 'androidx.work:work-runtime:2.8.1'
    implementation 'com.google.firebase:firebase-messaging:23.4.0'
    
    // Test dependencies
    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation "androidx.test.ext:junit:$androidxJunitVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$androidxEspressoVersion"
    
    // Multidex support
    implementation 'androidx.multidex:multidex:2.0.1'
}

// Force specific plugin versions to resolve conflicts
configurations.all {
    resolutionStrategy {
        force 'com.getcapacitor:capacitor-android:5.5.1'
        force 'androidx.core:core:1.12.0'
        force 'androidx.appcompat:appcompat:1.6.1'
        
        // Plugin-specific fixes
        eachDependency { details ->
            if (details.requested.group == 'com.android.support') {
                details.useVersion '28.0.0'
            }
        }
    }
}

apply from: 'capacitor.build.gradle'

try {
    def servicesJSON = file('google-services.json')
    if (servicesJSON.text) {
        apply plugin: 'com.google.gms.google-services'
    }
} catch(Exception e) {
    logger.info("google-services.json not found, google-services plugin not applied. Push Notifications won't work")
}