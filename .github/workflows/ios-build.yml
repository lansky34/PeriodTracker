name: üçé iOS App Store Build Pipeline

on:
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'archive'
        type: choice
        options:
        - archive
        - simulator
      export_method:
        description: 'Export method'
        required: true
        default: 'app-store'
        type: choice
        options:
        - app-store
        - ad-hoc
        - development

env:
  DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer

jobs:
  ios-build:
    name: üçé Build iOS for App Store
    runs-on: macos-latest
    
    steps:
    - name: üì¶ Checkout Repository
      uses: actions/checkout@v4
      
    - name: üîß Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: üì± Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: üîê Setup Ruby and CocoaPods
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true
        
    - name: üíø Install Node Dependencies
      run: |
        npm ci
        
    - name: üèóÔ∏è Build Web Assets
      run: |
        npm run build
        
    - name: üîÑ Sync iOS Capacitor
      run: |
        npx cap sync ios
        
    - name: üíé Install CocoaPods Dependencies
      run: |
        cd ios/App
        pod install --repo-update
        
    - name: üîê Import Code Signing Certificates
      if: ${{ github.event.inputs.build_type == 'archive' }}
      env:
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        CERTIFICATE_P12: ${{ secrets.CERTIFICATE_P12 }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        # Create keychain
        security create-keychain -p "" build.keychain
        security list-keychains -s build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        
        # Import certificate if provided (for production builds)
        if [ -n "$CERTIFICATE_P12" ]; then
          echo $CERTIFICATE_P12 | base64 -d > certificate.p12
          security import certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
        fi
        
        # Install provisioning profile if provided
        if [ -n "$PROVISIONING_PROFILE" ]; then
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo $PROVISIONING_PROFILE | base64 -d > ~/Library/MobileDevice/Provisioning\ Profiles/FlowTracker.mobileprovision
        fi
        
    - name: üì± Build iOS Archive (App Store)
      if: ${{ github.event.inputs.build_type == 'archive' }}
      run: |
        cd ios/App
        
        # Create build directory
        mkdir -p build
        
        # Determine code signing settings
        if [ -n "${{ secrets.CERTIFICATE_P12 }}" ] && [ -n "${{ secrets.DEVELOPMENT_TEAM }}" ]; then
          echo "Using production code signing..."
          CODE_SIGN_ARGS="DEVELOPMENT_TEAM=${{ secrets.DEVELOPMENT_TEAM }}"
        else
          echo "Using development code signing (for testing without certificates)..."
          CODE_SIGN_ARGS="CODE_SIGN_IDENTITY='' CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO"
        fi
        
        # Create archive for App Store
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath build/FlowTracker.xcarchive \
          -allowProvisioningUpdates \
          MARKETING_VERSION=1.0.0 \
          CURRENT_PROJECT_VERSION=1 \
          PRODUCT_BUNDLE_IDENTIFIER=xyz.flowtracker.app \
          $CODE_SIGN_ARGS
          
    - name: üì¶ Export IPA for App Store
      if: ${{ github.event.inputs.build_type == 'archive' }}
      run: |
        cd ios/App
        
        # Update ExportOptions.plist with environment variables
        if [ -n "${{ secrets.DEVELOPMENT_TEAM }}" ]; then
          /usr/libexec/PlistBuddy -c "Set :teamID ${{ secrets.DEVELOPMENT_TEAM }}" ../../ExportOptions.plist
        fi
        
        /usr/libexec/PlistBuddy -c "Set :method ${{ github.event.inputs.export_method }}" ../../ExportOptions.plist
        
        # Export archive to IPA
        if [ -f build/FlowTracker.xcarchive/Info.plist ]; then
          xcodebuild -exportArchive \
            -archivePath build/FlowTracker.xcarchive \
            -exportPath build/export \
            -exportOptionsPlist ../../ExportOptions.plist \
            -allowProvisioningUpdates
        else
          echo "‚ùå Archive not found, cannot export IPA"
          exit 1
        fi
          
    - name: üîç Verify Build Output
      run: |
        echo "=== iOS Build Verification ==="
        find ios/App/build -name "*.xcarchive" -o -name "*.ipa" | head -10
        
        # Check for any IPA file (name might vary)
        IPA_FILE=$(find ios/App/build/export -name "*.ipa" | head -1)
        
        if [ -n "$IPA_FILE" ]; then
          echo "‚úÖ IPA file generated successfully!"
          ls -lh "$IPA_FILE"
          echo "IPA_PATH=$IPA_FILE" >> $GITHUB_ENV
        else
          echo "‚ùå IPA file not found - build failed!"
          echo "Build directory contents:"
          find ios/App/build -type f | head -20
          
          echo "Export directory contents:"
          if [ -d ios/App/build/export ]; then
            ls -la ios/App/build/export/
          fi
          
          echo "Archive verification:"
          if [ -f ios/App/build/FlowTracker.xcarchive/Info.plist ]; then
            echo "Archive exists but export failed"
          else
            echo "Archive creation failed"
          fi
          
          exit 1
        fi
        
    - name: üì§ Upload iOS Archive
      if: ${{ github.event.inputs.build_type == 'archive' }}
      uses: actions/upload-artifact@v4
      with:
        name: flowtracker-ios-archive
        path: |
          ios/App/build/*.xcarchive
          ios/App/build/export/*.ipa
        retention-days: 30
        if-no-files-found: warn
        
    - name: üì§ Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-logs
        path: |
          ios/App/build/logs
          ~/Library/Developer/Xcode/DerivedData/**/Logs/**
        retention-days: 7
        if-no-files-found: ignore

    - name: üìä Build Summary
      if: always()
      run: |
        echo "=== üçé iOS Build Summary ==="
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        echo "Xcode Version: $(xcodebuild -version)"
        echo "iOS Simulators Available:"
        xcrun simctl list devices | grep -E "(iPhone|iPad)" | head -5
        
        if [ -f ios/App/build/export/FlowTracker.ipa ]; then
          echo "‚úÖ FlowTracker IPA ready for App Store submission!"
          echo "File size: $(ls -lh ios/App/build/export/FlowTracker.ipa | awk '{print $5}')"
        fi