name: 🚀 Android Release (FIXED)

# BRAND NEW WORKFLOW FILE - No --with-name issues!

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string
      version_code:
        description: 'Version Code (integer)'
        required: true
        default: '1'
        type: string
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  APP_NAME: FlowTracker
  PACKAGE_NAME: xyz.flowtracker.app
  JAVA_VERSION: '17'

jobs:
  build-android-aab:
    name: 🤖 Build Android AAB (FIXED)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: 🔧 Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📱 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 📋 Accept Android SDK Licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
    - name: 🔧 Install Android SDK Components
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-35" \
          "build-tools;35.0.0"
        
    - name: 💿 Install Dependencies
      run: npm ci --prefer-offline --no-audit
        
    - name: 🏗️ Build Web Assets
      run: |
        echo "Building FlowTracker web assets..."
        npm run build
        
        # Verify build output
        if [ -d "dist" ]; then
          echo "✅ Web assets built successfully to dist/"
          du -sh dist/
        elif [ -d "client/dist" ]; then
          echo "✅ Web assets built successfully to client/dist/"
          du -sh client/dist/
        elif [ -d "build" ]; then
          echo "✅ Web assets built successfully to build/"
          du -sh build/
        else
          echo "❌ Build failed - no dist/, client/dist/, or build/ directory found"
          exit 1
        fi
        
    - name: 🔄 Sync Android Capacitor
      run: |
        echo "Syncing Capacitor Android project..."
        npx cap sync android
        echo "✅ Capacitor Android sync completed"
        
    - name: 🔐 Restore Release Keystore
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        if [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEYSTORE_BASE64" ]; then
          echo "❌ Missing required Android signing secrets"
          echo "🚨 Google Play Store requires the same signing key for all app updates!"
          exit 1
        fi
        
        cd android/app
        echo "$KEYSTORE_BASE64" | base64 -d > my-release-key.jks
        
        if [ ! -f "my-release-key.jks" ]; then
          echo "❌ Failed to restore keystore file"
          exit 1
        fi
        
        echo "✅ Keystore restored successfully"
        
    - name: 🔑 Setup Signing Environment
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: |
        echo "ANDROID_KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
        echo "ANDROID_KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV  
        echo "ANDROID_KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
        echo "✅ Signing environment configured"
        
    - name: 🏗️ Build Signed Android AAB
      working-directory: android
      run: |
        echo "Building signed Android App Bundle..."
        echo "App Version: ${{ github.event.inputs.app_version }}"
        echo "Version Code: ${{ github.event.inputs.version_code }}"
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        
        # Set version in build.gradle
        sed -i "s/versionCode .*/versionCode ${{ github.event.inputs.version_code }}/" app/build.gradle
        sed -i "s/versionName .*/versionName \"${{ github.event.inputs.app_version }}\"/" app/build.gradle
        
        # Clean and build
        ./gradlew clean
        ./gradlew bundle${{ github.event.inputs.build_type == 'release' && 'Release' || 'Debug' }} --stacktrace
        
        # Verify AAB was created
        AAB_PATH="app/build/outputs/bundle/${{ github.event.inputs.build_type }}/app-${{ github.event.inputs.build_type }}.aab"
        if [ ! -f "$AAB_PATH" ]; then
          echo "❌ AAB file not found at $AAB_PATH"
          exit 1
        fi
        
        AAB_SIZE=$(du -h "$AAB_PATH" | cut -f1)
        echo "✅ AAB created successfully: $AAB_SIZE"
        echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
        
    - name: 📥 Download and Setup Bundletool
      run: |
        echo "Setting up bundletool for AAB validation..."
        BUNDLETOOL_VERSION="1.15.6"
        wget -q "https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar" -O bundletool.jar
        echo "✅ Bundletool downloaded successfully"
        
    - name: 🔍 Verify AAB Signing and Validation
      working-directory: android
      run: |
        echo "Verifying AAB signing and structure..."
        
        # Validate AAB structure with bundletool
        java -jar ../bundletool.jar validate --bundle="$AAB_PATH"
        if [ $? -eq 0 ]; then
          echo "✅ AAB structure validation passed"
        else
          echo "❌ AAB structure validation failed"
          exit 1
        fi
        
        echo "✅ AAB verification completed successfully"
        
    - name: 📤 Upload AAB Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ github.event.inputs.app_version }}-${{ github.event.inputs.build_type }}
        path: android/app/build/outputs/bundle/**/*.aab
        retention-days: 30
        if-no-files-found: error
        
    - name: 🏷️ Create GitHub Release with AAB (FIXED - NO --with-name!)
      if: ${{ github.event.inputs.build_type == 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Creating GitHub release with signed AAB (FIXED VERSION)..."
        
        # Find AAB file
        AAB_FILE=$(find android/app/build/outputs/bundle/release -name "*.aab" -type f | head -1)
        if [ -z "$AAB_FILE" ]; then
          echo "❌ No AAB file found"
          exit 1
        fi
        
        echo "✅ Found AAB file: $AAB_FILE"
        
        # Set release variables
        RELEASE_TAG="v${{ github.event.inputs.app_version }}-build${{ github.event.inputs.version_code }}-fixed"
        RELEASE_NAME="FlowTracker v${{ github.event.inputs.app_version }} (Build ${{ github.event.inputs.version_code }}) - FIXED"
        AAB_NAME="FlowTracker-v${{ github.event.inputs.app_version }}-signed-FIXED.aab"
        
        # Create release notes
        cat > release_notes.md << EOF
        # 🚀 FlowTracker Android Release - FIXED VERSION
        
        **Version:** ${{ github.event.inputs.app_version }}  
        **Build:** ${{ github.event.inputs.version_code }}  
        **Package:** ${{ env.PACKAGE_NAME }}  
        **Status:** ✅ Production Ready (No --with-name errors!)
        
        ## 📱 Google Play Store Submission
        - Download the AAB file below
        - Upload directly to Google Play Console
        - File is production-signed and ready for release
        
        Built with FIXED workflow on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
        
        # Clean up any existing release
        if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
          echo "Cleaning up existing release..."
          gh release delete "$RELEASE_TAG" --yes || true
        fi
        
        # Create release - USING FIXED APPROACH (NO --with-name!)
        echo "Creating release with FIXED command..."
        cp "$AAB_FILE" "$AAB_NAME"
        
        # FIXED: Single step release creation (no --with-name flag!)
        gh release create "$RELEASE_TAG" "$AAB_NAME" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md \
          --latest
        
        echo "✅ GitHub release created successfully with FIXED workflow!"
        echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"
        
    - name: 📊 Build Summary
      if: always()
      run: |
        echo "==========================================="
        echo "🚀 Android Release Build Summary (FIXED)"
        echo "==========================================="
        echo "📱 App: ${{ env.APP_NAME }}"
        echo "📦 Package: ${{ env.PACKAGE_NAME }}"
        echo "📊 Version: ${{ github.event.inputs.app_version }} (${{ github.event.inputs.version_code }})"
        echo "🏗️ Build Type: ${{ github.event.inputs.build_type }}"
        echo "🔐 Signed: ✅ Yes"
        echo "🛠️ Workflow: FIXED VERSION (No --with-name errors!)"
        echo "==========================================="
        
        if [ -f "$AAB_PATH" ]; then
          echo ""
          echo "🎉 SUCCESS! FlowTracker Android app built with FIXED workflow!"
          echo "📥 Download the AAB from the workflow artifacts"
          echo "🚀 Upload to Google Play Console for review"
        else
          echo ""
          echo "❌ Build failed - check the logs above for details"
        fi