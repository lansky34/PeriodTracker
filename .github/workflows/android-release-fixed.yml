name: üöÄ Android Release (FIXED)

# BRAND NEW WORKFLOW FILE - No --with-name issues!

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string
      version_code:
        description: 'Version Code (integer)'
        required: true
        default: '1'
        type: string
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
      upload_to_play_console:
        description: 'Upload to Google Play Console (requires PLAY_CONSOLE_SERVICE_ACCOUNT_JSON secret)'
        required: true
        default: false
        type: boolean

env:
  APP_NAME: FlowTracker
  PACKAGE_NAME: xyz.flowtracker.app
  JAVA_VERSION: '17'

jobs:
  build-android-aab:
    name: ü§ñ Build Android AAB (FIXED)
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üì¶ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ‚òï Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: üîß Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: üì± Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: üìã Accept Android SDK Licenses
      run: yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses
      
    - name: üîß Install Android SDK Components
      run: |
        yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager \
          "platform-tools" \
          "platforms;android-35" \
          "build-tools;35.0.0"
        
    - name: üíø Install Dependencies
      run: npm ci --prefer-offline --no-audit
        
    - name: üèóÔ∏è Build Web Assets
      run: |
        echo "Building FlowTracker web assets..."
        npm run build
        
        # Verify build output
        if [ -d "dist" ]; then
          echo "‚úÖ Web assets built successfully to dist/"
          du -sh dist/
        elif [ -d "client/dist" ]; then
          echo "‚úÖ Web assets built successfully to client/dist/"
          du -sh client/dist/
        elif [ -d "build" ]; then
          echo "‚úÖ Web assets built successfully to build/"
          du -sh build/
        else
          echo "‚ùå Build failed - no dist/, client/dist/, or build/ directory found"
          exit 1
        fi
        
    - name: üîÑ Sync Android Capacitor
      run: |
        echo "Syncing Capacitor Android project..."
        npx cap sync android
        echo "‚úÖ Capacitor Android sync completed"
        
    - name: üîê Restore Release Keystore
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        if [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEYSTORE_BASE64" ]; then
          echo "‚ùå Missing required Android signing secrets"
          echo "üö® Google Play Store requires the same signing key for all app updates!"
          exit 1
        fi
        
        cd android/app
        echo "$KEYSTORE_BASE64" | base64 -d > my-release-key.jks
        
        if [ ! -f "my-release-key.jks" ]; then
          echo "‚ùå Failed to restore keystore file"
          exit 1
        fi
        
        echo "‚úÖ Keystore restored successfully"
        
    - name: üîë Setup Signing Environment
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: |
        echo "ANDROID_KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
        echo "ANDROID_KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV  
        echo "ANDROID_KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
        echo "‚úÖ Signing environment configured"
        
    - name: üèóÔ∏è Build Signed Android AAB
      working-directory: android
      run: |
        echo "Building signed Android App Bundle..."
        echo "App Version: ${{ github.event.inputs.app_version }}"
        echo "Version Code: ${{ github.event.inputs.version_code }}"
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        
        # Set version in build.gradle
        sed -i "s/versionCode .*/versionCode ${{ github.event.inputs.version_code }}/" app/build.gradle
        sed -i "s/versionName .*/versionName \"${{ github.event.inputs.app_version }}\"/" app/build.gradle
        
        # Clean and build
        ./gradlew clean
        ./gradlew bundle${{ github.event.inputs.build_type == 'release' && 'Release' || 'Debug' }} --stacktrace
        
        # Verify AAB was created
        AAB_PATH="app/build/outputs/bundle/${{ github.event.inputs.build_type }}/app-${{ github.event.inputs.build_type }}.aab"
        if [ ! -f "$AAB_PATH" ]; then
          echo "‚ùå AAB file not found at $AAB_PATH"
          exit 1
        fi
        
        AAB_SIZE=$(du -h "$AAB_PATH" | cut -f1)
        echo "‚úÖ AAB created successfully: $AAB_SIZE"
        echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
        
    - name: üì• Download and Setup Bundletool
      run: |
        echo "Setting up bundletool for AAB validation..."
        BUNDLETOOL_VERSION="1.15.6"
        wget -q "https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar" -O bundletool.jar
        echo "‚úÖ Bundletool downloaded successfully"
        
    - name: üîç Verify AAB Signing and Validation
      working-directory: android
      run: |
        echo "Verifying AAB signing and structure..."
        
        # Validate AAB structure with bundletool
        java -jar ../bundletool.jar validate --bundle="$AAB_PATH"
        if [ $? -eq 0 ]; then
          echo "‚úÖ AAB structure validation passed"
        else
          echo "‚ùå AAB structure validation failed"
          exit 1
        fi
        
        echo "‚úÖ AAB verification completed successfully"
        
    - name: üì§ Upload AAB Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ github.event.inputs.app_version }}-${{ github.event.inputs.build_type }}
        path: android/app/build/outputs/bundle/**/*.aab
        retention-days: 30
        if-no-files-found: error
        
    - name: üè∑Ô∏è Create GitHub Release with AAB (FIXED - NO --with-name!)
      if: ${{ github.event.inputs.build_type == 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Creating GitHub release with signed AAB (FIXED VERSION)..."
        
        # Find AAB file
        AAB_FILE=$(find android/app/build/outputs/bundle/release -name "*.aab" -type f | head -1)
        if [ -z "$AAB_FILE" ]; then
          echo "‚ùå No AAB file found"
          exit 1
        fi
        
        echo "‚úÖ Found AAB file: $AAB_FILE"
        
        # Set release variables
        RELEASE_TAG="v${{ github.event.inputs.app_version }}-build${{ github.event.inputs.version_code }}-fixed"
        RELEASE_NAME="FlowTracker v${{ github.event.inputs.app_version }} (Build ${{ github.event.inputs.version_code }}) - FIXED"
        AAB_NAME="FlowTracker-v${{ github.event.inputs.app_version }}-signed-FIXED.aab"
        
        # Create release notes
        cat > release_notes.md << EOF
        # üöÄ FlowTracker Android Release - FIXED VERSION
        
        **Version:** ${{ github.event.inputs.app_version }}  
        **Build:** ${{ github.event.inputs.version_code }}  
        **Package:** ${{ env.PACKAGE_NAME }}  
        **Status:** ‚úÖ Production Ready (No --with-name errors!)
        
        ## üì± Google Play Store Submission
        - Download the AAB file below
        - Upload directly to Google Play Console
        - File is production-signed and ready for release
        
        Built with FIXED workflow on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        EOF
        
        # Clean up any existing release
        if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
          echo "Cleaning up existing release..."
          gh release delete "$RELEASE_TAG" --yes || true
        fi
        
        # Create release - USING FIXED APPROACH (NO --with-name!)
        echo "Creating release with FIXED command..."
        cp "$AAB_FILE" "$AAB_NAME"
        
        # FIXED: Single step release creation (no --with-name flag!)
        gh release create "$RELEASE_TAG" "$AAB_NAME" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md \
          --latest
        
        echo "‚úÖ GitHub release created successfully with FIXED workflow!"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"
        
    - name: üöÄ Upload to Google Play Console
      if: ${{ github.event.inputs.upload_to_play_console == 'true' && github.event.inputs.build_type == 'release' }}
      env:
        PLAY_CONSOLE_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_CONSOLE_SERVICE_ACCOUNT_JSON }}
      run: |
        echo "üöÄ Starting Google Play Console upload..."
        
        if [ -z "$PLAY_CONSOLE_SERVICE_ACCOUNT_JSON" ]; then
          echo "‚ùå PLAY_CONSOLE_SERVICE_ACCOUNT_JSON secret not found"
          echo "Please add your Google Play Console service account JSON as a GitHub secret"
          echo "See: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
        fi
        
        # Find AAB file
        AAB_FILE=$(find android/app/build/outputs/bundle/release -name "*.aab" -type f | head -1)
        if [ -z "$AAB_FILE" ]; then
          echo "‚ùå No AAB file found for upload"
          exit 1
        fi
        
        echo "üì± App Package: ${{ env.PACKAGE_NAME }}"
        echo "üìÅ AAB File: $AAB_FILE"
        echo "üìä Version: ${{ github.event.inputs.app_version }} (Code: ${{ github.event.inputs.version_code }})"
        
        # Setup service account credentials
        echo "$PLAY_CONSOLE_SERVICE_ACCOUNT_JSON" > /tmp/play-console-service-account.json
        
        # Install Google Play CLI (using python approach for better compatibility)
        echo "Installing Google Play publishing tools..."
        pip install --quiet google-api-python-client google-auth-httplib2 google-auth-oauthlib
        
        # Create Python script for upload
        cat > /tmp/upload_to_play_console.py << 'EOF'
import json
import sys
from googleapiclient.discovery import build
from google.oauth2 import service_account
from googleapiclient.http import MediaFileUpload
        
# Load configuration
service_account_file = '/tmp/play-console-service-account.json'
package_name = sys.argv[1]
aab_file = sys.argv[2]
version_name = sys.argv[3]
version_code = int(sys.argv[4])
        
print(f"üîê Authenticating with Google Play Console...")
        
# Setup credentials
credentials = service_account.Credentials.from_service_account_file(
    service_account_file,
    scopes=['https://www.googleapis.com/auth/androidpublisher']
)
        
# Build service
service = build('androidpublisher', 'v3', credentials=credentials)
        
try:
    print(f"üì§ Creating edit transaction...")
    
    # Create edit
    edit_request = service.edits().insert(body={}, packageName=package_name)
    edit_result = edit_request.execute()
    edit_id = edit_result['id']
    
    print(f"‚úÖ Edit created: {edit_id}")
    print(f"üì¶ Uploading AAB file: {aab_file}")
    
    # Upload AAB
    media = MediaFileUpload(aab_file, mimetype='application/octet-stream')
    upload_request = service.edits().bundles().upload(
        editId=edit_id,
        packageName=package_name,
        media_body=media
    )
    upload_result = upload_request.execute()
    
    print(f"‚úÖ AAB uploaded successfully")
    print(f"üìä Version Code: {upload_result['versionCode']}")
    
    # Update internal testing track
    track_request = service.edits().tracks().update(
        editId=edit_id,
        packageName=package_name,
        track='internal',
        body={
            'track': 'internal',
            'releases': [{
                'name': f'Release v{version_name}',
                'versionCodes': [str(upload_result['versionCode'])],
                'status': 'completed'
            }]
        }
    )
    track_result = track_request.execute()
    
    print(f"‚úÖ Added to internal testing track")
    
    # Commit the edit
    commit_request = service.edits().commit(
        editId=edit_id,
        packageName=package_name
    )
    commit_result = commit_request.execute()
    
    print(f"üéâ Successfully uploaded to Google Play Console!")
    print(f"üîó View in Play Console: https://play.google.com/console/u/0/developers/{package_name}/app-dashboard")
    print(f"üì± App is now available for internal testing")
    
except Exception as e:
    print(f"‚ùå Upload failed: {str(e)}")
    sys.exit(1)
EOF
        
        # Run the upload
        echo "üöÄ Uploading AAB to Google Play Console..."
        python /tmp/upload_to_play_console.py \
          "${{ env.PACKAGE_NAME }}" \
          "$AAB_FILE" \
          "${{ github.event.inputs.app_version }}" \
          "${{ github.event.inputs.version_code }}"
        
        # Cleanup
        rm -f /tmp/play-console-service-account.json /tmp/upload_to_play_console.py
        
        echo "‚úÖ Google Play Console upload completed!"
        
    - name: üìä Build Summary
      if: always()
      run: |
        echo "==========================================="
        echo "üöÄ Android Release Build Summary (FIXED)"
        echo "==========================================="
        echo "üì± App: ${{ env.APP_NAME }}"
        echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
        echo "üìä Version: ${{ github.event.inputs.app_version }} (${{ github.event.inputs.version_code }})"
        echo "üèóÔ∏è Build Type: ${{ github.event.inputs.build_type }}"
        echo "üîê Signed: ‚úÖ Yes"
        echo "üõ†Ô∏è Workflow: FIXED VERSION (No --with-name errors!)"
        echo "==========================================="
        
        if [ -f "$AAB_PATH" ]; then
          echo ""
          echo "üéâ SUCCESS! FlowTracker Android app built with FIXED workflow!"
          echo "üì• Download the AAB from the workflow artifacts"
          echo "üöÄ Upload to Google Play Console for review"
        else
          echo ""
          echo "‚ùå Build failed - check the logs above for details"
        fi