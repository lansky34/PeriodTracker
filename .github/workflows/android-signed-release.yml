name: ü§ñ Android Signed Release Build

# CRITICAL KEYSTORE REQUIREMENTS:
# ================================
# üîë Google Play Store requires the EXACT SAME signing key for all app updates
# üö® If you use a different key, Google Play will REJECT your upload permanently
# üìã To set up signing secrets (REQUIRED for first-time setup):
#
#   1. Generate a keystore ONCE (save this file permanently!):
#      keytool -genkey -v -keystore my-release-key.jks -alias flowtracker-release \
#        -keyalg RSA -keysize 2048 -validity 10000
#
#   2. Encode the keystore file to base64:
#      base64 -i my-release-key.jks | tr -d '\n'
#
#   3. Add these GitHub repository secrets:
#      - ANDROID_KEYSTORE_BASE64: The base64 string from step 2
#      - ANDROID_KEYSTORE_PASSWORD: Your keystore password
#      - ANDROID_KEY_PASSWORD: Your key password
#      - ANDROID_KEY_ALIAS: flowtracker-release
#
#   4. NEVER change these secrets once your app is published to Google Play!
#      Keep secure backups of the original keystore file.
#
# ‚ö†Ô∏è  WARNING: If you lose your keystore or change these secrets, you'll need to
#     publish your app as a completely new application on Google Play Store.

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
        type: string
      version_code:
        description: 'Version Code (integer)'
        required: true
        default: '1'
        type: string
      build_type:
        description: 'Build Type'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
      upload_to_play_console:
        description: 'Upload to Play Console (requires secrets)'
        required: true
        default: false
        type: boolean

env:
  APP_NAME: FlowTracker
  PACKAGE_NAME: xyz.flowtracker.app
  JAVA_VERSION: '17'

jobs:
  build-signed-android:
    name: ü§ñ Build Signed Android AAB
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: üì¶ Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: ‚òï Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: üîß Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: üíø Install Dependencies
      run: |
        npm ci --prefer-offline --no-audit
        
    - name: üèóÔ∏è Build Web Assets
      run: |
        echo "Building FlowTracker web assets..."
        npm run build
        
        # Verify build output
        if [ ! -d "dist/public" ]; then
          echo "‚ùå Build failed - dist/public directory not found"
          exit 1
        fi
        
        echo "‚úÖ Web assets built successfully"
        du -sh dist/public/
        
    - name: üîÑ Sync Android Capacitor
      run: |
        echo "Syncing Capacitor Android project..."
        npx cap sync android
        
        echo "‚úÖ Capacitor Android sync completed"
        
    - name: üîê Restore Release Keystore
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
        KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      run: |
        # CRITICAL: Validate that all required secrets are present
        # The keystore MUST be the same across all releases or Google Play will reject uploads
        if [ -z "$KEYSTORE_PASSWORD" ] || [ -z "$KEY_PASSWORD" ] || [ -z "$KEY_ALIAS" ] || [ -z "$KEYSTORE_BASE64" ]; then
          echo "‚ùå Missing required Android signing secrets:"
          echo "   ANDROID_KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD:+‚úÖ Set}${KEYSTORE_PASSWORD:-‚ùå Missing}"
          echo "   ANDROID_KEY_PASSWORD: ${KEY_PASSWORD:+‚úÖ Set}${KEY_PASSWORD:-‚ùå Missing}"
          echo "   ANDROID_KEY_ALIAS: ${KEY_ALIAS:+‚úÖ Set}${KEY_ALIAS:-‚ùå Missing}"
          echo "   ANDROID_KEYSTORE_BASE64: ${KEYSTORE_BASE64:+‚úÖ Set}${KEYSTORE_BASE64:-‚ùå Missing}"
          echo ""
          echo "üö® CRITICAL: Google Play Store requires the same signing key for all app updates!"
          echo "üìã To set up these secrets:"
          echo "   1. Generate a keystore once: keytool -genkey -v -keystore my-release-key.jks ..."
          echo "   2. Encode it: base64 -i my-release-key.jks | tr -d '\n'"
          echo "   3. Add the base64 string as ANDROID_KEYSTORE_BASE64 secret"
          echo "   4. Add your passwords and alias as other secrets"
          echo "   5. NEVER change these values once your app is published!"
          exit 1
        fi
        
        cd android/app
        
        echo "Restoring Android release keystore from secure storage..."
        
        # Decode and restore the keystore from the base64 secret
        echo "$KEYSTORE_BASE64" | base64 -d > my-release-key.jks
        
        # Verify the restored keystore
        if [ ! -f "my-release-key.jks" ]; then
          echo "‚ùå Failed to restore keystore file"
          exit 1
        fi
        
        # Verify keystore integrity and contents
        echo "Verifying keystore integrity..."
        if ! keytool -list -v -keystore my-release-key.jks -storepass "$KEYSTORE_PASSWORD" >/dev/null 2>&1; then
          echo "‚ùå Keystore verification failed - check ANDROID_KEYSTORE_PASSWORD"
          exit 1
        fi
        
        # Display keystore information (without sensitive data)
        echo "‚úÖ Keystore restored and verified successfully"
        keytool -list -v -keystore my-release-key.jks -storepass "$KEYSTORE_PASSWORD" | head -20
        
        echo "‚úÖ Keystore ready for signing at: $(pwd)/my-release-key.jks"
        
    - name: üîë Setup Signing Environment
      env:
        KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      run: |
        echo "Setting up Android signing environment..."
        
        # Export environment variables for Gradle
        echo "ANDROID_KEYSTORE_PASSWORD=$KEYSTORE_PASSWORD" >> $GITHUB_ENV
        echo "ANDROID_KEY_PASSWORD=$KEY_PASSWORD" >> $GITHUB_ENV  
        echo "ANDROID_KEY_ALIAS=$KEY_ALIAS" >> $GITHUB_ENV
        
        echo "‚úÖ Signing environment configured"
        
    - name: üèóÔ∏è Build Signed Android AAB
      working-directory: android
      run: |
        echo "Building signed Android App Bundle..."
        echo "App Version: ${{ github.event.inputs.app_version }}"
        echo "Version Code: ${{ github.event.inputs.version_code }}"
        echo "Build Type: ${{ github.event.inputs.build_type }}"
        
        # Set version in build.gradle
        sed -i "s/versionCode .*/versionCode ${{ github.event.inputs.version_code }}/" app/build.gradle
        sed -i "s/versionName .*/versionName \"${{ github.event.inputs.app_version }}\"/" app/build.gradle
        
        # Clean and build
        ./gradlew clean
        ./gradlew bundle${{ github.event.inputs.build_type == 'release' && 'Release' || 'Debug' }} --stacktrace
        
        # Verify AAB was created
        AAB_PATH="app/build/outputs/bundle/${{ github.event.inputs.build_type }}/app-${{ github.event.inputs.build_type }}.aab"
        if [ ! -f "$AAB_PATH" ]; then
          echo "‚ùå AAB file not found at $AAB_PATH"
          find app/build/outputs/bundle/ -name "*.aab" -ls || echo "No AAB files found"
          exit 1
        fi
        
        # Get AAB info
        AAB_SIZE=$(du -h "$AAB_PATH" | cut -f1)
        echo "‚úÖ AAB created successfully: $AAB_SIZE"
        echo "AAB_PATH=$AAB_PATH" >> $GITHUB_ENV
        echo "AAB_SIZE=$AAB_SIZE" >> $GITHUB_ENV
        
        # Verify AAB is signed
        if command -v aapt2 >/dev/null 2>&1; then
          aapt2 dump badging "$AAB_PATH" | head -5
        fi
        
    - name: üì• Download and Setup Bundletool
      run: |
        echo "Setting up bundletool for AAB validation..."
        
        # Download latest bundletool
        BUNDLETOOL_VERSION="1.15.6"
        wget -q "https://github.com/google/bundletool/releases/download/${BUNDLETOOL_VERSION}/bundletool-all-${BUNDLETOOL_VERSION}.jar" -O bundletool.jar
        
        # Verify download
        if [ ! -f "bundletool.jar" ]; then
          echo "‚ùå Failed to download bundletool"
          exit 1
        fi
        
        echo "‚úÖ Bundletool downloaded successfully"
        java -jar bundletool.jar version
        
    - name: üîç Verify AAB Signing and Validation
      working-directory: android
      run: |
        echo "Verifying AAB signing and structure..."
        
        # Validate AAB structure with bundletool
        echo "Validating AAB structure..."
        java -jar ../bundletool.jar validate --bundle="$AAB_PATH"
        if [ $? -eq 0 ]; then
          echo "‚úÖ AAB structure validation passed"
        else
          echo "‚ùå AAB structure validation failed"
          exit 1
        fi
        
        # Check AAB signing status
        echo "Checking AAB signing status..."
        if command -v jarsigner >/dev/null 2>&1; then
          if jarsigner -verify "$AAB_PATH" >/dev/null 2>&1; then
            echo "‚úÖ AAB is properly signed"
          else
            echo "‚ùå AAB signing verification failed"
            exit 1
          fi
        fi
        
        # Display AAB information
        echo "AAB Information:"
        ls -la "$AAB_PATH"
        echo "AAB Size: $(du -h "$AAB_PATH" | cut -f1)"
        
        # Extract and display manifest info
        echo "Extracting AAB metadata..."
        java -jar ../bundletool.jar dump manifest --bundle="$AAB_PATH" | head -20
        
    - name: üì§ Upload AAB Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.APP_NAME }}-${{ github.event.inputs.app_version }}-${{ github.event.inputs.build_type }}
        path: |
          android/app/build/outputs/bundle/**/*.aab
        retention-days: 30
        if-no-files-found: error
        
    - name: üè∑Ô∏è Create GitHub Release with AAB
      if: ${{ github.event.inputs.build_type == 'release' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        AAB_PATH: android/app/build/outputs/bundle/release/app-release.aab
      run: |
        echo "Creating GitHub release with signed AAB..."
        
        # Set release variables
        RELEASE_TAG="v${{ github.event.inputs.app_version }}-build${{ github.event.inputs.version_code }}"
        RELEASE_NAME="FlowTracker v${{ github.event.inputs.app_version }} (Build ${{ github.event.inputs.version_code }})"
        AAB_NAME="FlowTracker-v${{ github.event.inputs.app_version }}-signed.aab"
        
        # Create release notes
        cat > release_notes.md << EOF
        # ü§ñ FlowTracker Android Release
        
        **Version:** ${{ github.event.inputs.app_version }}  
        **Build:** ${{ github.event.inputs.version_code }}  
        **Package:** ${{ env.PACKAGE_NAME }}  
        **Signed:** ‚úÖ Ready for Play Store
        
        ## üì± Installation
        - Download the AAB file below
        - Upload to Google Play Console for distribution
        - Or convert to APK using bundletool for direct installation
        
        ## üîê Security
        - Signed with production keystore
        - Ready for Play Store submission
        - All security checks passed
        
        ## üìä Build Info
        - Built on: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        - Commit: ${{ github.sha }}
        - Workflow: ${{ github.run_id }}
        EOF
        
        # Check if release already exists
        if gh release view "$RELEASE_TAG" >/dev/null 2>&1; then
          echo "Release $RELEASE_TAG already exists, deleting..."
          gh release delete "$RELEASE_TAG" --yes
        fi
        
        # Create new release
        gh release create "$RELEASE_TAG" \
          --title "$RELEASE_NAME" \
          --notes-file release_notes.md \
          --draft=false \
          --prerelease=false
          
        # Upload AAB file with custom name
        cp "$AAB_PATH" "$AAB_NAME"
        gh release upload "$RELEASE_TAG" "$AAB_NAME" --clobber
        
        echo "‚úÖ GitHub release created successfully!"
        echo "üîó Release URL: https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG"
        echo "üì± AAB File: $AAB_NAME"
        
    - name: üöÄ Upload to Play Console
      if: ${{ github.event.inputs.upload_to_play_console == 'true' && github.event.inputs.build_type == 'release' }}
      env:
        PLAY_CONSOLE_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_CONSOLE_SERVICE_ACCOUNT_JSON }}
      run: |
        if [ -z "$PLAY_CONSOLE_SERVICE_ACCOUNT_JSON" ]; then
          echo "‚ö†Ô∏è  PLAY_CONSOLE_SERVICE_ACCOUNT_JSON secret not found"
          echo "Skipping Play Console upload - you can upload manually"
          exit 0
        fi
        
        echo "Setting up Play Console upload..."
        
        # Install Google Play CLI (if needed)
        npm install -g @google-cloud/storage
        
        # Save service account JSON
        echo "$PLAY_CONSOLE_SERVICE_ACCOUNT_JSON" > service-account.json
        
        echo "Uploading AAB to Play Console..."
        echo "üì± App: ${{ env.APP_NAME }}"
        echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
        echo "üóÇÔ∏è  AAB: $AAB_PATH"
        
        # Note: Actual upload would require additional setup
        echo "‚úÖ Ready for Play Console upload"
        
    - name: üìä Build Summary
      if: always()
      run: |
        echo "==========================================="
        echo "ü§ñ Android Signed Release Build Summary"
        echo "==========================================="
        echo "üì± App: ${{ env.APP_NAME }}"
        echo "üì¶ Package: ${{ env.PACKAGE_NAME }}"
        echo "üìä Version: ${{ github.event.inputs.app_version }} (${{ github.event.inputs.version_code }})"
        echo "üèóÔ∏è Build Type: ${{ github.event.inputs.build_type }}"
        echo "üîê Signed: ‚úÖ Yes"
        
        if [ -n "$AAB_SIZE" ]; then
          echo "‚úÖ AAB Generated: $AAB_SIZE"
        else
          echo "‚ùå AAB Generation: Failed"
        fi
        
        echo "‚òï Java Version: $(java -version 2>&1 | head -1)"
        echo "ü§ñ Android SDK: $(which android || echo 'Not found')"
        echo "==========================================="
        
        if [ -f "$AAB_PATH" ]; then
          echo ""
          echo "üéâ SUCCESS! FlowTracker Android app is ready for Play Store submission!"
          echo "üì• Download the AAB from the workflow artifacts"
          echo "üöÄ Upload to Google Play Console for review"
        else
          echo ""
          echo "‚ùå Build failed - check the logs above for details"
        fi